worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 443 ssl;  # SSL을 사용하여 443 포트에서 수신
        server_name 192.168.6.99;  # 도메인 이름 또는 IP

        ssl_certificate /etc/nginx/certs/rootca.crt;  # SSL 인증서 경로
        ssl_certificate_key /etc/nginx/certs/rootca.key;  # SSL 키 경로

        # SSL 설정 (옵션)
        ssl_protocols TLSv1.2 TLSv1.3;  # 사용할 SSL 프로토콜
        ssl_ciphers 'HIGH:!aNULL:!MD5';  # 사용할 암호화 스위트

        location / {
            proxy_pass http://frontend-cont:3000;  # Node.js 애플리케이션으로 프록시
            proxy_set_header Upgrade $http_upgrade;  # WebSocket 지원
            proxy_set_header Connection 'upgrade';  # WebSocket 연결 유지
            proxy_set_header Host $host;  # 원래 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr;  # 클라이언트의 실제 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 클라이언트의 IP 주소를 X-Forwarded-For 헤더에 추가
            proxy_set_header X-Forwarded-Proto $scheme;  # 요청의 프로토콜 (http 또는 https) 전달
        }

		location /api {
			proxy_pass http://backend-cont:8000;  # 백엔드 서버 주소
            proxy_set_header Upgrade $http_upgrade;  # WebSocket 지원
            proxy_set_header Connection 'upgrade';  # WebSocket 연결 유지
            proxy_set_header Host $host;  # 원래 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr;  # 클라이언트의 실제 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 클라이언트의 IP 주소를 X-Forwarded-For 헤더에 추가
            proxy_set_header X-Forwarded-Proto $scheme;  # 요청의 프로토콜 (http 또는 https) 전달
		}

        # 선택적으로 HTTP에서 HTTPS로 리디렉션
        error_page 497 https://$host$request_uri;  # HTTP 요청을 HTTPS로 리디렉션
    }

    # HTTP 요청을 HTTPS로 리디렉션하는 서버 블록
    server {
        listen 80;  # HTTP 요청 수신
        server_name 192.168.6.99;  # 도메인 이름 또는 IP
        return 301 https://$host$request_uri;  # HTTPS로 리디렉션
    }
}
