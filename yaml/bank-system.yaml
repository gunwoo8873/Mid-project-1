apiVersion: v1
kind: Namespace
metadata:
  name: bank-namespace

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all
  namespace: bank-namespace
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - {}
  egress:
    - {}

---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-tls-secret
  namespace: bank-namespace
type: kubernetes.io/tls
data:
  # base64 tls.crt -w 0
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlDVkRDQ0Fmc0NGSGJreVYvaFF1UmswbXU4ZEhzRVRZWVA5TWdrTUFvR0NDcUdTTTQ5QkFNQ01JR3JNUXN3DQpDUVlEVlFRR0V3SkxVakVVTUJJR0ExVUVDQXdMUjNsbGIyNW5aMmt0Wkc4eEVUQVBCZ05WQkFjTUNGTmxiMjVuDQpibUZ0TVJRd0VnWURWUVFLREF0bWNtVmxjM1J5YjJ0bGN6RU1NQW9HQTFVRUN3d0RjM05zTVN3d0tnWURWUVFEDQpEQ05tY21WbGMzUnliMnRsY3k1emMyd2dVbTl2ZENCRFFTQkRaWEowYVdacFkyRjBaVEVoTUI4R0NTcUdTSWIzDQpEUUVKQVJZU1ozSmhlV1JoZEdGQWJtRjJaWEl1WTI5dE1DQVhEVEkwTURjd05EQTBNakF6TjFvWUR6UTNOakl3DQpOVE14TURReU1ETTNXakNCcXpFTE1Ba0dBMVVFQmhNQ1MxSXhGREFTQmdOVkJBZ01DMGQ1Wlc5dVoyZHBMV1J2DQpNUkV3RHdZRFZRUUhEQWhUWlc5dVoyNWhiVEVVTUJJR0ExVUVDZ3dMWm5KbFpYTjBjbTlyWlhNeEREQUtCZ05WDQpCQXNNQTNOemJERXNNQ29HQTFVRUF3d2pabkpsWlhOMGNtOXJaWE11YzNOc0lGSnZiM1FnUTBFZ1EyVnlkR2xtDQphV05oZEdVeElUQWZCZ2txaGtpRzl3MEJDUUVXRW1keVlYbGtZWFJoUUc1aGRtVnlMbU52YlRCWk1CTUdCeXFHDQpTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCSlkzSGkzZmpOVU84Y1FJbDRhaW8rYmFQNVBzOHhBUzZkQnd2ciswDQpzWm9tT2JoM0x6QUovaFNwcFVXQVBhcjZGTzNtSjNHUFdXMDRpUmFhYmxMWFJ1Y3dDZ1lJS29aSXpqMEVBd0lEDQpSd0F3UkFJZ1BwZWFnRUxxanNZWmd0QzlhVDk1c2UwTzQwWFU1b3lWTHUyTC9nWjgwZWNDSUZpK1lJTUExWkxODQo0dTdwMXJoajY3dXFIaGJVenFHRlcrVzN6STB2aEIzWQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0K
  # base64 tls.key -w 0
  tls.key: |
    LS0tLS1CRUdJTiBFQyBQQVJBTUVURVJTLS0tLS0NCkJnZ3Foa2pPUFFNQkJ3PT0NCi0tLS0tRU5EIEVDIFBBUkFNRVRFUlMtLS0tLQ0KLS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tDQpNSGNDQVFFRUlKYzJBcUc2ZVE4MGtLRTUzVzU3WXhZbGtwYXBoZHBrcUE4MjdTdFdFZ09ob0FvR0NDcUdTTTQ5DQpBd0VIb1VRRFFnQUVsamNlTGQrTTFRN3h4QWlYaHFLajV0by9rK3p6RUJMcDBIQyt2N1N4bWlZNXVIY3ZNQW4rDQpGS21sUllBOXF2b1U3ZVluY1k5WmJUaUpGcHB1VXRkRzV3PT0NCi0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0NCg==

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: bank-namespace
data:
  nginx.conf: |
    worker_processes auto;

    events {
        worker_connections 1024;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        server {
            listen 443 ssl;  # SSL을 사용하여 443 포트에서 수신
            server_name _;  # 도메인 이름 or IP or _(모든 아이피)
            
            ssl_certificate /etc/nginx/ssl/tls.crt;  # SSL 인증서 경로
            ssl_certificate_key /etc/nginx/ssl/tls.key;  # SSL 키 경로
            
            location / {
                proxy_pass http://frontend-server:3000;  # 프론트엔드로 프록시
                proxy_set_header Host $host;  # 원래 호스트 헤더 전달
                proxy_set_header X-Real-IP $remote_addr;  # 클라이언트의 실제 IP 주소 전달
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 클라이언트의 IP 주소를 X-Forwarded-For 헤더에 추가
                proxy_set_header X-Forwarded-Proto $scheme;  # 요청의 프로토콜 (http 또는 https) 전달
            }

            location /api {
                proxy_pass http://backend-server:8000;  # 백엔드 서버 주소
                proxy_set_header Host $host;  # 원래 호스트 헤더 전달
                proxy_set_header X-Real-IP $remote_addr;  # 클라이언트의 실제 IP 주소 전달
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 클라이언트의 IP 주소를 X-Forwarded-For 헤더에 추가
                proxy_set_header X-Forwarded-Proto $scheme;  # 요청의 프로토콜 (http 또는 https) 전달
            }
            
            error_page 497 https://$host:30443$request_uri;
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-server
  namespace: bank-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: jake2580/mid-bank-redis:v0.0.1
        volumeMounts:
        - mountPath: /data
          name: redis-data
        ports:
        - containerPort: 6379
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-server
  namespace: bank-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: jake2580/mid-bank-mysql:v0.0.1
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "abc123"
        - name: MYSQL_DATABASE
          value: "mybank"
        - name: MYSQL_USER
          value: "student"
        - name: MYSQL_PASSWORD
          value: "abc123"
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-data
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-data-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-server
  namespace: bank-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: jake2580/mid-bank-backend:v0.0.1
        env:
        - name: PORT
          value: "8000"
        - name: NODE_ENV
          value: "production"
        - name: MYSQL_HOST
          value: "mysql-server"
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_DATABASE
          value: "mybank"
        - name: MYSQL_USER
          value: "student"
        - name: MYSQL_PASSWORD
          value: "abc123"
        - name: REDIS_HOST
          value: "redis-server"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_SECRET
          value: "20240703MiniprojectSecretKey"
        ports:
        - containerPort: 8000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-server
  namespace: bank-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: jake2580/mid-bank-frontend:v0.0.1
        env:
        - name: PORT
          value: "3000"
        - name: NODE_ENV
          value: "production"
        - name: JWT_SECRET
          value: "thisIsMySecretKey"
        - name: BACKEND_HOST
          value: "backend-server"
        - name: BACKEND_PORT
          value: "8000"
        - name: CLIENT_ID
          value: "7hI4IYFb2ETaTtFDe95B"
        - name: CLIENT_SECRET
          value: "61qNdLSf9f"
        - name: REDIRECT_URI
          value: "https://192.168.6.190:30443/naverlogin/login"
        - name: JAVASCRIPT_APPKEY
          value: "4b5ecb6281d617d7a988622ad24d251b"
        - name: REDIS_HOST
          value: "redis-server"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_SECRET
          value: "20240703MiniprojectSecretKey"
        ports:
        - containerPort: 3000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-server
  namespace: bank-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: jake2580/mid-bank-nginx:v0.0.1
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-certs
          mountPath: /etc/nginx/ssl
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-certs
        secret:
          secretName: nginx-tls-secret

---
apiVersion: v1
kind: Service
metadata:
  name: redis-server
  namespace: bank-namespace
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-server
  namespace: bank-namespace
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql

---
apiVersion: v1
kind: Service
metadata:
  name: backend-server
  namespace: bank-namespace
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: backend

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-server
  namespace: bank-namespace
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: frontend

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-server
  namespace: bank-namespace
spec:
  type: NodePort
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30080
  - name: https
    port: 443
    targetPort: 443
    nodePort: 30443
  selector:
    app: nginx

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-redis
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mysql
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mysql"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: bank-namespace
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-data-pvc
  namespace: bank-namespace
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
